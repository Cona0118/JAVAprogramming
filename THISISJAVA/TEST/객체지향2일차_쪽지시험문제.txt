1. 아래 코드를 보고, 오류가 나는 줄은 주석처리 하시오
public class MemberCall {
    int iv = 10;
    static int cv = 20;

    int iv2 = cv;
    // static int cv2 = iv; 

    static void staticMethod1() {
        System.out.println(cv);
        // System.out.println(iv); 

        MemberCall c = new MemberCall();
        System.out.println(c.iv);
    }

    void instanceMethod1() {
        System.out.println(cv);
        System.out.println(iv);
    }

    static void staticMethod2() {
        staticMethod1();
        // instanceMethod1(); 

        MemberCall c = new MemberCall();
        c.instanceMethod1();
    }

    void instanceMethod2() {
        staticMethod1();
        instanceMethod1();
    }
} 

2. 다음에 주어진 메서드 printInfo에 추가 내용을 반영하여 오버로딩(overloading) 하시오

추가 내용:
1.정수형 나이를 함께 출력하는 메서드
2.아무 매개변수 없이 "정보 없음"을 출력하는 메서드

public class OverloadExample {
    public void printInfo(String name) {
        System.out.println("이름: " + name);
    }

    // 아래에 오버로딩된 메서드들을 작성하세요.
    public void printInfo(String name, int age){
	System.out.println("이름: " + name);
	System.out.println("나이: " + age);
    }
    public void printInfo(){
	System.out.println("정보 없음");
    }
}


3. 다음에 주어진 Car 클래스와 출력 내용을 참고하여, CarTest 클래스의 main 메서드를 완성하시오.(두 생성자 모두 사용해 보기)
class Car {
    String color;
    String gearType;
    int door;

    Car() {}

    Car(String color, String gearType, int door) {
        this.color = color;
        this.gearType = gearType;
        this.door = door;
    }
}

public class CarTest {
    public static void main(String[] args) {
	Car c1 = new Car("black","auto",4);
	Car c2;
	c2.color = "white";
	c2.gearType = "auto";
	c2.door = 4;


        System.out.println("c1의 color=" + c1.color + ", gearType=" + c1.gearType + ", door=" + c1.door);
        System.out.println("c2의 color=" + c2.color + ", gearType=" + c2.gearType + ", door=" + c2.door);
    }
}

<출력내용>
c1의 color=black, gearType=auto, door=4
c2의 color=white, gearType=auto, door=4

4. 다음은 CarTest 클래스의 main 메서드와 실행 결과이다.
주어진 실행 결과가 출력되도록 Car 클래스를 완성하시오.
(중복되는 내용을 줄이기 위해 생성자는 3개로 작성함)

public class CarTest {
    public static void main(String[] args) {
        Car c1 = new Car();
        Car c2 = new Car("blue");

        System.out.println("c1의 color=" + c1.color + ", gearType=" + c1.gearType + ", door=" + c1.door);
        System.out.println("c2의 color=" + c2.color + ", gearType=" + c2.gearType + ", door=" + c2.door);
    }
}

class Car {
	String color = "white";
	String gearType = "auto";
	int door = 4;

	Car() {}
	Car(String c) {
		this.color = c;
	}
}
<실행결과>
c1의 color=white, gearType=auto, door=4
c2의 color=blue, gearType=auto, door=4



5.다음은 BlockTest 클래스의 코드이다.
이 코드를 실행했을 때 콘솔에 출력되는 내용을 모두 작성하시오.

class BlockTest {
    static {
        System.out.println("static { }");
    }

    {
        System.out.println("{ }");
    }

    public BlockTest() {
        System.out.println("생성자");
    }

    public static void main(String[] args) {
        System.out.println("BlockTest bt = new BlockTest();");
        BlockTest bt = new BlockTest();

        System.out.println("BlockTest bt2 = new BlockTest();");
        BlockTest bt2 = new BlockTest();
    }
}
static { }
BlockTest bt = new BlockTest();
{ }
생성자
BlockTest bt2 = new BlockTest();
{ }
생성자


6. 아래와 같은 출력 내용이 나올수 있도록 StaticBlockTest 클래스를 완성하시오
class StaticBlockTest {
    static int[] arr = new int[10];
    static {
    	for (int i = 0; i < arr.length; i++) {
	    arr[i] = i+1;
    	}
    }

    public static void main(String[] args) {
        for (int i = 0; i < arr.length; i++) {
            System.out.println("arr[" + i + "] : " + arr[i]);
        }
    }
}

<출력내용>
arr[0] : 1
arr[1] : 2
arr[2] : 3
arr[3] : 4
arr[4] : 5
arr[5] : 6
arr[6] : 7
arr[7] : 8
arr[8] : 9
arr[9] : 10

