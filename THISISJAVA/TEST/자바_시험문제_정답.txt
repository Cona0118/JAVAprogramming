1.
// 공통 부모 클래스
abstract class Unit {
    int x, y;                     // 현재 위치

    abstract void move(int x, int y);  // 유닛마다 다른 이동 방식

    void stop() {                // 현재 위치에 정지
    }
}

// 보병
class Marine extends Unit {
    @Override
    void move(int x, int y) {    // 지정된 위치로 이동
    }

    void stimPack() {           // 스팀팩 사용
    }
}

// 탱크
class Tank extends Unit {
    @Override
    void move(int x, int y) {    // 지정된 위치로 이동
    }

    void chageMode() {          // 공격 모드 전환
    }
}

// 수송선
class DropShip extends Unit {
    @Override
    void move(int x, int y) {    // 지정된 위치로 이동
    }

    void load() {               // 대상 태우기
    }

    void unload() {             // 대상 내리기
    }
}

2.
p.x=1000
Child Method
c.x=100
Child Method

3. 1,2,4
4.
class Product {
    static int count = 0;          // 클래스 변수: 전체 제품 수
    int serialNo;                  // 인스턴스 변수: 고유 제품 번호

    { 
        count++;                   // 제품 수 증가
        serialNo = count;         // 현재 제품의 번호 지정
    }

    public Product() {}          
}

5.
package ch01.sec08;

import java.util.Scanner;

public class BankApplication {
    private static Account[] accounts = new Account[100];
    private static int accountCount = 0;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        boolean run = true;

        while (run) {
            System.out.println("----------------------------------");
            System.out.println("1.계좌생성 | 2.계좌목록 | 3.예금 | 4.출금 | 5.종료");
            System.out.println("----------------------------------");
            System.out.print("선택> ");

            String input = scanner.nextLine();

            switch (input) {
                case "1" -> createAccount(scanner);
                case "2" -> listAccounts();
                case "3" -> deposit(scanner);
                case "4" -> withdraw(scanner);
                case "5" -> {
                    System.out.println("프로그램을 종료합니다.");
                    run = false;
                }
                default -> System.out.println("잘못된 입력입니다.");
            }
        }

        scanner.close();
    }

    private static void createAccount(Scanner scanner) {
        System.out.print("계좌번호: ");
        String ano = scanner.nextLine();

        if (findAccount(ano) != null) {
            System.out.println("이미 존재하는 계좌번호입니다.");
            return;
        }

        System.out.print("계좌주: ");
        String owner = scanner.nextLine();

        System.out.print("초기입금액: ");
        int balance = Integer.parseInt(scanner.nextLine());

        accounts[accountCount++] = new Account(ano, owner, balance);
        System.out.println("결과: 계좌가 생성되었습니다.");
    }

    private static void listAccounts() {
        for (int i = 0; i < accountCount; i++) {
            Account acc = accounts[i];
            System.out.println("계좌번호: " + acc.getAno() + ", 계좌주: " + acc.getOwner() + ", 잔고: " + acc.getBalance());
        }
    }

    private static void deposit(Scanner scanner) {
        System.out.print("계좌번호: ");
        String ano = scanner.nextLine();

        System.out.print("예금액: ");
        int amount = Integer.parseInt(scanner.nextLine());

        Account acc = findAccount(ano);
        if (acc != null) {
            acc.deposit(amount);
            System.out.println("결과: 예금이 성공되었습니다.");
        } else {
            System.out.println("계좌를 찾을 수 없습니다.");
        }
    }

    private static void withdraw(Scanner scanner) {
        System.out.print("계좌번호: ");
        String ano = scanner.nextLine();

        System.out.print("출금액: ");
        int amount = Integer.parseInt(scanner.nextLine());

        Account acc = findAccount(ano);
        if (acc != null) {
            boolean result = acc.withdraw(amount);
            if (result) {
                System.out.println("결과: 출금이 성공되었습니다.");
            } else {
                System.out.println("잔액이 부족합니다.");
            }
        } else {
            System.out.println("계좌를 찾을 수 없습니다.");
        }
    }

    private static Account findAccount(String ano) {
        for (int i = 0; i < accountCount; i++) {
            if (accounts[i].getAno().equals(ano)) {
                return accounts[i];
            }
        }
        return null;
    }
}

// Account 클래스 (같은 파일 내에 작성, public 아님)
class Account {
    private String ano;
    private String owner;
    private int balance;

    public Account(String ano, String owner, int balance) {
        this.ano = ano;
        this.owner = owner;
        this.balance = balance;
    }

    public String getAno() {
        return ano;
    }

    public String getOwner() {
        return owner;
    }

    public int getBalance() {
        return balance;
    }

    public void deposit(int amount) {
        balance += amount;
    }

    public boolean withdraw(int amount) {
        if (balance >= amount) {
            balance -= amount;
            return true;
        }
        return false;
    }
}


6.
public class ExcetionExam{
    public static void main(String[] args) {
        String[] array = {100,"1oo"};

        for(int i=0;i<=array.length;i++){
            try {
                int value=Integer.parseInt(array[i]);
                System.out.println("array["+i+"]:"+value);
            } catch(ArrayIndexOutOfBoundsException e) {
                System.out.println("배열 인덱스가 초과됨 :" + e.getMessage());
            } catch(NumberFormatException e) {
                System.out.println("숫자로 변환할 수 없음 : "+e.getMessage());
            }
        }
    }
}
7.
class Buyer {
    int money = 1000;
    Product[] cart = new Product[7];  // 구입한 제품을 저장하기 위한 배열
    int i = 0;                         // cart 배열에 사용될 인덱스

    // 7-1. buy 메서드
    void buy(Product p) {
        // 가진 돈이 부족하면 구매 불가
        if (money < p.price) {
            System.out.println("잔액이 부족하여 " + p + "를 살 수 없습니다.");
            return;
        }

        // 가격만큼 돈 차감
        money -= p.price;

        // 장바구니에 제품 추가
        add(p);
    }

    // 7-2. add 메서드
    void add(Product p) {
        // cart 배열에 상품 저장
        if (i < cart.length) {
            cart[i++] = p;
        } else {
            // 배열이 꽉 찼지만 확장 조건이 없으므로 저장 불가
            System.out.println("장바구니가 가득 찼습니다. 더 이상 담을 수 없습니다.");
        }
    }

    // 7-3. summary 메서드
    void summary() {
        int total = 0;
        System.out.print("구입한 물건 : ");

        for (int j = 0; j < i; j++) {
            System.out.print(cart[j] + " ");
            total += cart[j].price;
        }

        System.out.println();
        System.out.println("사용한 금액 : " + total);
        System.out.println("남은 금액 : " + money);
    }
}
8. C
9. 
 public static void main(String[] args) {
        int[][] array = {
            {95, 86},
            {83, 92, 96},
            {78, 83, 93, 87, 88}
        };

        int sum = 0;
        int count = 0;

        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[i].length; j++) {
                sum += array[i][j];
                count++;
            }
        }

        double average = (double) sum / count;

        System.out.println("합계: " + sum);
        System.out.println("평균: " + average);
    }

10. a - 0, b - false, d - null
11. B
12. C
13. B
14. D
15. A
16. D
17. B
18. A