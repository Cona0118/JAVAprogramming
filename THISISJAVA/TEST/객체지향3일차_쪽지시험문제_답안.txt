1.
class Vehicle {
    void startEngine() {}
}

class Engine {
    String type;

    Engine(String type) {}
}

class Car extends Vehicle {
    Engine engine;

    Car(String engineType) {}

    void openTrunk() {}
}

--------------------------------------------------------------------------------------

2.
kind: SPADE, number: 1
kind: CLOVER, number: K

--------------------------------------------------------------------------------------

3.
class PointTest {
    public static void main(String[] args) {
        Point3D p3 = new Point3D(1, 2, 3);
        System.out.println(p3.getLocation()); // x: 1, y: 2, z: 3
    }
}

class Point {
    int x, y;

    Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

    String getLocation() {
        return "x: " + x + ", y: " + y;
    }
}

class Point3D extends Point {
    int z;

    Point3D(int x, int y, int z) {
        super(x, y); // 부모 클래스의 생성자 호출
        this.z = z;
    }

    @Override
    String getLocation() {
        return super.getLocation() + ", z: " + z; // 부모 클래스의 메서드 호출
    }
}

--------------------------------------------------------------------------------------

4.
private: 클래스 내부에서만 접근 가능

default: 클래스 내부, 같은 패키지에서 접근 가능

protected: 클래스 내부, 같은 패키지, 자식 클래스에서 접근 가능

public: 모든 클래스에서 접근 가능

--------------------------------------------------------------------------------------

5. D. abstract 메서드는 하위 클래스에서 반드시 오버라이드해야 하므로 접근이 가능해야함