1. 아래 세개의 클래스로부터 공통부분을 뽑아서 Unit이라는 클래스를 만들고 이 클래스를 상속받도록 코드를 변경하시오.
(move 메서드는 각 유닛마다 동작이 다르게 정의 되어야 하고, stop 메서드는 모든 유닛의 동작이 동일하다고 가정함)

class Marine {      //보병
    int x,y;        //현재 위치
    void move(int x,int y){/* 지정된 위치로 이동 */}
    void stop(){/* 현재 위치에 정지 */}
    void stimPack(){/* 스팀팩을 사용한다 */}
}

class Tank {        //탱크
    int x,y;        //현재 위치
    void move(int x,int y){/* 지정된 위치로 이동 */}
    void stop(){/* 현재 위치에 정지 */}
    void chageMode(){/* 공격모드를 변환한다 */}
}

class DropShip {    //수송선
    int x,y;        //현재 위치
    void move(int x,int y){/* 지정된 위치로 이동 */}
    void stop(){/* 현재 위치에 정지 */}
    void load(){/* 선택된 대상을 태운다 */}
    void unload(){/* 선택된 대상을 내린다 */}
}

답 :
class Unit {
    int x,y;
    void stop() {/* 현재 위치에 정지 */}
}

class Marine extends Unit {      //보병
    void move(int x,int y){/* 지정된 위치로 이동 */}
    void stimPack(){/* 스팀팩을 사용한다 */}
}

class Tank extends Unit {        //탱크
    void move(int x,int y){/* 지정된 위치로 이동 */}
    void chageMode(){/* 공격모드를 변환한다 */}
}

class DropShip extends Unit {    //수송선
    void move(int x,int y){/* 지정된 위치로 이동 */}
    void load(){/* 선택된 대상을 태운다 */}
    void unload(){/* 선택된 대상을 내린다 */}
}

// 정답 :
// 공통 부모 클래스
abstract class Unit {    // 추상 클래스로 정의
    int x, y;              
    abstract void move(int x, int y);  // 추상 메서드로 정의하여 유닛마다 재정의 강제 -> 유닛마다 다른 이동 방식
    void stop() { // 현재 위치에 정지 }
}

// 보병
class Marine extends Unit {
    @Override // Annotation 추가
    void move(int x, int y) { // 지정된 위치로 이동 }
    void stimPack() { // 스팀팩 사용 }
}
.
.
.


-----------------------------------------------------

2. 다음의 코드를 실행한 결과를 적으시오.
class Test{
    public static void main(String[] args) {
        Parent p = new Child();
        Child c = new Child();

        System.out.println("p.x="+p.x); // 1. p.x 에 접근 
        p.method(); // 2. p.method 접근

        System.out.println("c.x="+c.x); // 3. c.x에 접근
        c.method(); // 4. c.method 접근
    }
}

class Parent{
    int x = 1000; // 1.1 x = 1000 저장 및 출력

    void method() {
        System.out.println("Parent Method"); // 2.1 메서드 실행 // 4.1 메서드 실행
    }
}

class Child extends Parent {
    int x = 100; // 3.1 x = 100 저장 및 출력

    void method() {
        System.out.println("Child Method");
    }
}

답 :
p.x=1000
Child Method
c.x=100
Child Method

**
변수(variable) → 참조 변수 타입을 기준으로 접근
메서드(method) → 오버라이딩 시, 실제 객체 타입 기준으로 실행 (동적 바인딩)
**

-----------------------------------------------------

3. 다음의 코드를 컴파일하면 에러가 발생한다. 컴파일 에러가 발생하는 라인의 번호는 무엇인가?
class MemberCall {
    int  iv = 10;
    static int cv = 20;

    int iv2 = cv;
    static int cv2 = iv;            //1
    
    static void method1() {
        System.out.println(cv);
        System.out.println(iv);     //2
    }

    void method2() {
        System.out.println(cv);
        System.out.println(iv);     //3
    }

    static void method3() {
        method1();
        method2();          		//4
    }

    void method4() {
        method1();            	//5
        method2();
    }
}

답 : 1, 2, 4 

-----------------------------------------------------

4. 위 코드가 아래 실행 결과와 같이 나오도록 Product 클래스를 알맞게 수정하여 완성하시오.
(ProductTest 클래스와 Product 클래스의 생성자는 추가 및 변경하지 않음)
class Product {
    int count = 0;
    int serialNo;

    {
        serialNo;
    }

    public Product() {
        serialNo = ++count;
    }
}

class ProductTest {
    public static void main(String[] args) {
        Product p1 = new Product();
        Product p2 = new Product();
        Product p3 = new Product();
        Product p4 = new Product();

        System.out.println("p1의 제품번호(serial no)는 " + p1.serialNo);
        System.out.println("p2의 제품번호(serial no)는 " + p2.serialNo);
        System.out.println("p3의 제품번호(serial no)는 " + p3.serialNo);
        System.out.println("p4의 제품번호(serial no)는 " + p4.serialNo);
        System.out.println("생산된 제품의 수는 모두 " + Product.count + "개 입니다.");
    }
}

<실행결과>
p1의 제품번호(serial no)는 1
p2의 제품번호(serial no)는 2
p3의 제품번호(serial no)는 3
p4의 제품번호(serial no)는 4
생산된 제품의 수는 모두 4개 입니다.

-----------------------------------------------------

5. 다음은 키보드로부터 계좌를 입력받아 계좌를 관리하는 프로그램입니다.
계좌는 Account 객체로 생성되고 BankApplication에서 길이 100인 Account[]배열로 관리됩니다.
Account와 BankApplication클래스를 작성하시오.
(키보드를 입력받을 때는 Scanner의 nextLint()메서드를 사용함)
<조건>
-메뉴 : 1.계좌 생성|2.계좌 목록|3.예금|4.출금|5.종료
-계좌 생성시, 계좌번호,계좌주,초기 입금액을 입력받고, 입력한 계좌번호가 중복될 경우 계좌가 생성되지 않아야 함
-계좌목록 선택시, 지금까지 생성된 계좌번호,이름,금액이 조회되어 보여져야 함
-예금시, 계좌번호와 예금액을 입력받아 처리함
-출금시 계좌번호와 출금액을 입력받아 처리함
-종료시, 해당 프로그램을 종료함
-계좌생성,예금,출금 처리시 완료되었다는 문구를 출력함
-Setter,Getter 메서드를 이용
-balance는 0<=balance<1000000 의 범위만 가지며, 0과 1000000은 상수로 선언해서 이용
-Setter의 매개값이 음수이거나 백만원을 초과하면 현재 balance 값을 유지

답:
class Account{
    String accountNo;
    String name;
    int balance;
}

class BankApplication{
    final int MIN_BALANCE = 0;
    final int MAX_BALANCE = 1000000;
    Account[] accounts = new Account[100];
    Scanner scan = new Scanner(System.in);
    int account_maxIndex = 0;
    boolean run = true;

    void Application(){
        while(run){
            System.out.println("-----------------------------------------");
            System.out.println("1.계좌 생성|2.계좌 목록|3.예금|4.출금|5.종료");
            System.out.println("-----------------------------------------");
            System.out.print("메뉴 선택> ");
            String op = scan.nextLine();
            switch (op) {
                case "1":
                    accountCreate();
                    break;
                    
                case "2":
                    accountList();
                    break;

                case "3":
                    balanceIn();
                    break;
        
                case "4":
                    balanceOut();
                    break;
                    
                case "5":
                    run = false;
                    break;

                default:
                    break;
            }
        }
    }

    void accountCreate(){
        boolean b = true;
        System.out.print("계좌 번호> ");
        String no = scan.nextLine();
        if(account_maxIndex > 0){
            for(int i=0;i<account_maxIndex;i++){
                if(accounts[i].accountNo.equals(no)) {
                    b = false;
                    break;
                }
            }
        }
        if(b){
            System.out.print("계좌주> ");
            String name = scan.nextLine();

            System.out.print("초기 입금 금액> ");
            int money = Integer.parseInt(scan.nextLine());
            if(money >= MIN_BALANCE && money <= MAX_BALANCE){
                accounts[account_maxIndex] = new Account();
                accounts[account_maxIndex].accountNo = no;
                accounts[account_maxIndex].name = name;
                accounts[account_maxIndex].balance = money;
                System.out.println("계좌 생성이 완료되었습니다.");

                account_maxIndex++;
            }
            else System.out.println("올바른 금액을 입력해 주세요.");
        }
        else System.out.println("이미 존재하는 계좌번호 입니다.");
    }

    void accountList(){
        for(int i=0; i<account_maxIndex; i++){
            System.out.printf("%s   %s   %d",accounts[i].accountNo,accounts[i].name,accounts[i].balance);
            System.out.println();
        }
    }

    void balanceIn(){
        System.out.print("계좌 번호> ");
        String inputNo = scan.nextLine();
        int inputNoIndex = -1;
        for(int i=0; i<account_maxIndex; i++){
            if(inputNo.equals(accounts[i].accountNo)) inputNoIndex = i;
        }
        
        if(inputNoIndex >= 0){
            System.out.print("입금액> ");
            int inputMoney = Integer.parseInt(scan.nextLine());
            if(inputMoney>=0) {
                accounts[inputNoIndex].balance += inputMoney;
            }
            else {
                System.out.println("올바른 금액을 입력해주세요");
            }
        }
        else {
            System.out.println("일치하는 계좌가 없습니다.");
        }
    }

    void balanceOut(){
        System.out.print("계좌 번호> ");
        String outputNo = scan.nextLine();
        int outputNoIndex = -1;
        for(int i=0; i<account_maxIndex; i++){
            if(outputNo.equals(accounts[i].accountNo)) outputNoIndex = i;
        }
        if(outputNoIndex >= 0){
            System.out.print("출금액> ");
            int inputMoney = Integer.parseInt(scan.nextLine());
            if(inputMoney>=0) {
                accounts[outputNoIndex].balance -= inputMoney;
            }
            else {
                System.out.println("올바른 금액을 입력해주세요");
            }
        }
        else {
            System.out.println("일치하는 계좌가 없습니다.");
        }
    }
}


class Q5 {
    public static void main(String[] args) {
        BankApplication bank = new BankApplication();

        bank.Application();
    }
}

-----------------------------------------------------

6. 다음 코드를 실행하면 아래와 같은 오류가 발생하여 프로그램이 비정상 종료된다.
아래의 코드가 비정상 종료되지 않고, 정상적인 실행 결과가 나오도록 적절한 예외 클래스를 골라서 코드를 작성하시오.
public class ExceptionExam {
    public static void main(String[] args) {
        String[] array = {"100", "1oo"};

        for (int i = 0; i <= array.length; i++) {
            int value = Integer.parseInt(array[i]);
            System.out.println("array[" + i + "]:" + value);
        }
    }
}

<제공된 예외 클래스 목록>
ArrayIndexOutOfBoundsException  // <- 배열 크기 초과
NumberFormatException  // <- 문자열 → 숫자 변환 실패
NullPointerException  // <- 객체 참조 변수가 null
ArithmeticException  // <- 잘못된 산술 연산
ClassCastException  // <- 잘못된 타입 캐스팅

답 :
public class ExceptionExam {
    public static void main(String[] args) {
        String[] array = {"100", "1oo"};

        try{
            for (int i = 0; i <= array.length; i++) {
                int value = Integer.parseInt(array[i]);
                System.out.println("array[" + i + "]:" + value);
            }   
        }catch(NumberFormatException e){}
    }
}

정답 : 
public class ExcetionExam{
    public static void main(String[] args) { 
        String[] array = {100,"1oo"}; // 숫자 변환 실패

        for(int i=0;i<=array.length;i++){  // 배열 크기 초과
            try {
                int value=Integer.parseInt(array[i]);
                System.out.println("array["+i+"]:"+value);
            } catch(ArrayIndexOutOfBoundsException e) {
                System.out.println("배열 인덱스가 초과됨 :" + e.getMessage());
            } catch(NumberFormatException e) {
                System.out.println("숫자로 변환할 수 없음 : "+e.getMessage());
            }
        }
    }
}

-----------------------------------------------------

7. 다음은 물건을 구입하는 사람을 정의한 Buyer클래스이다.
이 클래스는 멤버변수로 돈(money)과 장바구니(cart)를 가지고 있다.
제품을 구입하는 기능의 buy메서드와 장바구니에 구입한 물건을 추가하는 add메서드,
구입한 물건의 목록과 사용금액 그리고 남은 금액을 출력하는 summary메서드를 완성하시오.
(7-1,2,3의 내용을 참고하여 메서드 선언부를 포함하여 작성해야함)

7-1. 메서드명 : buy
기능 : 지정된 물건을 구입한다 가진 돈 에서 물건의 가격을 빼고 장바구니에 담는다
만일 가진 돈이 물건의 가격보다 적다면 바로 종료한다.
반환타입 : 없음
매개변수 : 구입할 물건
7-2. 메서드명 : add
기능 : 지정된 물건을 장바구니에 담는다.
만일 상품이 7개가 담기면 "장바구니가 가득 찼습니다. 더 이상 담을 수 없습니다."라고 문구를 출력한다.
반환타입 : 없음 
매개변수 : 구입할 물건
7-3. 메서드명 : summary 
기능 : 구입한 물건의 목록과 사용금액 남은 금액을 출력한다.
반환타입 : 없음
매개변수 : 없음 

class Exercise {
    public static void main(String args[]) {
        Buyer b = new Buyer();
        b.buy(new Tv());
        b.buy(new Computer());
        b.buy(new Tv());
        b.buy(new Audio());
        b.buy(new Computer());
        b.buy(new Computer());
        b.buy(new Computer());
        b.summary();
    }
}

class Buyer {
    int money = 1000;
    Product[] cart = new Product[7];    // 구입한 제품을 저장하기 위한 배열
    int i = 0;                  // cart 배열에 사용될 인덱스

    // 이 메서드를 완성하시오.
    void buy(Product p) {
        if(money>= p.price){
            money -= p.price;
            add(p);
        }
    }
    // 이 메서드를 완성하시오.
    void add(Product p) {
        if(i<7) cart[i++] = p;
        if(i==7) System.out.println("장바구니가 가득 찼습니다. 더 이상 담을 수 없습니다.");
    }
    // 이 메서드를 완성하시오.
    void summary() {
        int sum = 0;
        for(int j=0; j<i ;j++) {
            System.out.println(cart[j]);
            sum += cart[j].price;
        }
        System.out.println("총 금액: "+sum);
        System.out.println("남은 금액: "+money);
    }
}

class Product {
    int price;

    Product(int price) {
        this.price = price;
    }
}

class Tv extends Product {
    Tv() {
        super(100);
    }

    public String toString() {
        return "Tv";
    }
}

class Computer extends Product {
    Computer() {
        super(200);
    }

    public String toString() {
        return "Computer";
    }
}

class Audio extends Product {
    Audio() {
        super(50);
    }

    public String toString() {
        return "Audio";
    }
}

-----------------------------------------------------

8. 다음주 초기화에 대한 설명으로 옳지 않은 것은?
 a. 멤버변수는 자동 초기화 되므로 초기화하지 않고도 값을 참조할 수 있다.
 b. 지역변수는 사용하기 전에 반드시 초기화해야 한다.
 c. 초기화 블럭보다 생성자가 먼저 수행된다.
 d. 인스턴스 변수보다 클래스 변수가 먼저 초기화 된다.
답 : c

-----------------------------------------------------

9. 주어진 배열 항목의 전체 합과 평균을 구해 출력하는 코드를 작성하시오.(중첩for문 이용)
int[][] array = {{95,86},{83,92,96},{78,83,93,87,88}};
답 :
int sum = 0;
int count = 0;

for(int i=0; i<array.length; i++){
    for(int j=0; j<array[i].length; j++){
        sum += array[i][j];
        count++;
    }
}

double average = (double)sum / count;

-----------------------------------------------------

10. 다음 자바 기본 자료형의 초기값을 단답형으로 작성하시오.
 a.int의 초기값은?
 b.boolean의 초기값은?
 c.참조형 변수(예: String)의 초기값은?
답: a- 0    b- false    c- null      


11. 메서드 오버로딩에 대한 설명으로 틀린 것은?
 a. 동일한 이름의 메서드를 여러 개 선언하는 것을 말한다.
 b. 리턴 타입이 달라야 한다.
 c. 매개 변수의 타입,수,순서를 다르게 선언해야 한다.
 d. 매개값의 타입 및 수에 따라 호출될 메서드가 선택된다.
답 :b


12. 접근 제한에 대한 설명으로 틀린 것은?
 a. 접근 제한자는 클래스,필드,생성자, 메서드의 사용을 제한한다.
 b. public 접근 제한은 아무런 제한 없이 해당 요소를 사용할 수 있게 한다.
 c. default 접근 제한은 해당 클래스 내부에서만 사용을 허가한다.
 d. 외부에서 접근하지 못하도록 하려면 private 접근 제한을 해야 한다.
답 : c


13. 클래스 타입 변환에 대한 설명 중 틀린 것은?
 a. 자식 객체는 부모 타입으로 자동 타입 변환된다
 b. 부모 객체는 어떤 자식 타입으로도 강제 타입 변환된다.
 c. 자동 타입 변환을 이용해서 필드와 매개변수의 다형성을 구현한다.
 d. 강제 타입 변환 전에 instanceof연산자로 변환 가능한지 검사하는 것이 좋다.
답 : b


14. 추상 클래스에 대한 설명으로 틀린 것은?
 a. 직접 객체를 생성할 수 없고, 상속만 할 수 있다.
 b. 추상 메서드를 재정의하지 않으면 자식 클래스도 추상 클래스가 되어야 한다.
 c. 추상 메서드는 자식 클래스에서 오버라이딩 할 수 있다.
 d. 추상 메서드를 반드시 포함한다.
답 : b -> d


15. throw에 대한 설명으로 틀린 것은?
 a. 예외를 호출한 곳으로 떠넘기기 위해 메서드 선언부에 작성된다.
 b. 예외를 최초로 발생시키는 코드이다
 c. throw로 발생된 예외는 일반적으로 생성자나 메서드 선언부에 throws로 떠넘겨진다.
 d. throw 키워드 뒤에는 예외 객체 생성 코드가 온다.
답 : a


16. 예외에 대한 설명 중 틀린 것은?
 a. 예외는 사용자의 잘못된 조작, 개발자의 잘못된 코딩으로 인한 프로그램 오류를 말한다.
 b. RuntimeException의 하위 예외는 컴파일러가 예외 처리 코드를 체크하지 않는다.
 c. 예외는 try-catch 블록을 사용해서 처리된다.
 d. 자바의 표준 예외만 프로그램에서 처리가 가능하다.
답 : d


17. 다음중 변수를 잘못 초기화 한 것은?
 a. long var2 = 10000000L;
 b. char var3 = '';
 c. float var4 = 10f;
 d. String var5 = "abc\ndef";
답 : b


18. 조건문과 반복문에 대해 잘못 설명한 것은?
 a. switch문에서 사용할 수 있는 변수의 타입은 int, double,char가 될 수 있다.
 b. if문은 조건식의 결과에 따라 실행 흐름을 달리할 수 있다.
 c. for문은 카운터 변수로 지정한 횟수만큼 반복시킬 때 사용할 수 있다.
 d. break문은 switch문, for문, while문을 종료할 때 사용할 수 있다.
답 : a


